/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.User;

import Business.EcoSystem;
import Business.StationMap.ChargingStation;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author adam
 */
public class UserChooseChargingStationJPanel extends javax.swing.JPanel
{

    JPanel userProcessContainer;
    EcoSystem system;
    UserAccount account;
    /**
     * Creates new form userLocationJPanel
     */


    public UserChooseChargingStationJPanel (JPanel userProcessContainer, EcoSystem system,UserAccount account)
    {
        
       initComponents();
       this.userProcessContainer=userProcessContainer;
       this.system=system;    
       this.account = account;
       populate(system.getStationmap().getMap());
    }
    
    private void populate(List<ChargingStation> list){
        DefaultTableModel model = (DefaultTableModel)stationTable.getModel();
        model.setRowCount(0);
        
        for(ChargingStation m :list) {
            Object row[] = new Object[4];
            row[0] = m;
            row[1]= m.getCoordinate().getDistance(account.getCoordinate());
            row[2]=m.getAvailableChargingPile().size();
            
            
            
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        stationTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnNavi = new javax.swing.JButton();
        letterSort = new javax.swing.JButton();
        distSort = new javax.swing.JButton();
        availSort = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1150, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Choose Your Charging Station");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 30, -1, -1));

        stationTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        stationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ChargingStation Name", "Distance (mile)", "Available ChargingPile"
            }
        ));
        jScrollPane1.setViewportView(stationTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 80, 590, 220));

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 90, -1));

        btnNavi.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNavi.setText("Start Navigation>");
        btnNavi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNaviActionPerformed(evt);
            }
        });
        add(btnNavi, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 320, 170, 40));

        letterSort.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        letterSort.setText("Sort by Letter");
        letterSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                letterSortActionPerformed(evt);
            }
        });
        add(letterSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 120, 150, 30));

        distSort.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        distSort.setText("Sort by Dist");
        distSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distSortActionPerformed(evt);
            }
        });
        add(distSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 180, 150, 30));

        availSort.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        availSort.setText("Sort by Avail");
        availSort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availSortActionPerformed(evt);
            }
        });
        add(availSort, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 240, 150, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/evStation.png"))); // NOI18N
        jLabel2.setText(" ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-30, 280, 350, 280));
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackActionPerformed
    {//GEN-HEADEREND:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnNaviActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNaviActionPerformed
    {//GEN-HEADEREND:event_btnNaviActionPerformed
        try
        {
            // TODO add your handling code here:
            int row =stationTable.getSelectedRow();
            if(row<0){
                JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            ChargingStation cs = (ChargingStation)stationTable.getValueAt(row, 0);
            userNavigationJPanel panel = new userNavigationJPanel(userProcessContainer,system,account,cs);
            userProcessContainer.add("RequestLabTestJPanel", panel);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
        } catch (IOException ex)
        {
            Logger.getLogger(UserChooseChargingStationJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        

    }//GEN-LAST:event_btnNaviActionPerformed

    private void letterSortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_letterSortActionPerformed
    {//GEN-HEADEREND:event_letterSortActionPerformed
        // TODO add your handling code here:
        List<ChargingStation> sortByLetter =new ArrayList<>();
        sortByLetter=system.getStationmap().getMap();
        Collections.sort(sortByLetter, 
                new Comparator<ChargingStation>() {
            @Override
            public int compare(ChargingStation cs1, ChargingStation cs2) {
                return cs1.getName().compareTo(cs2.getName());
            }
        });
        populate(sortByLetter);
        
    }//GEN-LAST:event_letterSortActionPerformed

    private void distSortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_distSortActionPerformed
    {//GEN-HEADEREND:event_distSortActionPerformed
        // TODO add your handling code here:
        List<ChargingStation> sortByDist =new ArrayList<>();
        sortByDist=system.getStationmap().getMap();
        Collections.sort(sortByDist, 
                new Comparator<ChargingStation>() {
            @Override
            public int compare(ChargingStation cs1, ChargingStation cs2) {
                return (int)(cs1.getCoordinate().getDistance(account.getCoordinate())-cs2.getCoordinate().getDistance(account.getCoordinate()));
            }
        });
        populate(sortByDist);
    }//GEN-LAST:event_distSortActionPerformed

    private void availSortActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_availSortActionPerformed
    {//GEN-HEADEREND:event_availSortActionPerformed
        // TODO add your handling code here:
        List<ChargingStation> sortByAvail =new ArrayList<>();
        sortByAvail=system.getStationmap().getMap();
        Collections.sort(sortByAvail, 
                new Comparator<ChargingStation>() {
            @Override
            public int compare(ChargingStation cs1, ChargingStation cs2) {
                return cs2.getAvailableChargingPile().size()-cs1.getAvailableChargingPile().size();
            }
        });
        populate(sortByAvail);
    }//GEN-LAST:event_availSortActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton availSort;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNavi;
    private javax.swing.JButton distSort;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton letterSort;
    private javax.swing.JTable stationTable;
    // End of variables declaration//GEN-END:variables
}
