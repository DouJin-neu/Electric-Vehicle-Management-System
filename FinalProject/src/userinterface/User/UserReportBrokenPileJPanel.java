/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.User;

import Business.EcoSystem;
import Business.StationMap.ChargingPile;
import Business.StationMap.ChargingStation;
import Business.StationMap.StationMap;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.DriverMaintenanceRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author adam
 */
public class UserReportBrokenPileJPanel extends javax.swing.JPanel
{
    JPanel userProcessContainer;
    EcoSystem system;
    UserAccount account;
    Map<ChargingPile,ChargingStation> reportPileMap;
    List<DriverMaintenanceRequest> requestList;
    /**
     * Creates new form UserReportBrokenPile
     */


    UserReportBrokenPileJPanel (JPanel userProcessContainer, EcoSystem system, UserAccount account)
    {
        
       initComponents();
       this.userProcessContainer=userProcessContainer;
       this.system=system;        
       this.account=account;
       this.reportPileMap=new TreeMap<ChargingPile,ChargingStation>();
       this.requestList= new ArrayList<DriverMaintenanceRequest>();
       populate();
       populateTable();
       
    }
    private void populateTable(){
        DefaultTableModel model = (DefaultTableModel) pileTable.getModel();

        model.setRowCount(0);

        for (ChargingPile cp : reportPileMap.keySet()) {
            
                Object row[] = new Object[2];
                row[0] = cp;
                model.addRow(row);
            
        }
    }
    
    private void populate(){
        comboStation.removeAllItems();
        StationMap map = system.getStationmap();
        for (ChargingStation cs : map.getMap()){
            //use name to identify the chargingstation
            comboStation.addItem(cs);
            
        }
        
    }
    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboStation = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        comboPile = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pileTable = new javax.swing.JTable();
        btnReview = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDetail = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setBackground(new java.awt.Color(207, 218, 218));
        setPreferredSize(new java.awt.Dimension(1150, 600));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Report A Broken Pile");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Select Your Charging Station:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, -1, -1));

        comboStation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboStation.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                comboStationActionPerformed(evt);
            }
        });
        add(comboStation, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 100, 240, 30));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Which Charging Pile is/are broken?");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, -1, -1));

        add(comboPile, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 200, 240, 30));

        btnAdd.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAdd.setText("Add>");
        btnAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 440, 100, 30));

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 510, 150, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Detail Information:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 280, -1, 20));

        pileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null},
                {null},
                {null},
                {null}
            },
            new String []
            {
                "Charging Pile ID"
            }
        ));
        jScrollPane2.setViewportView(pileTable);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 100, 200, 370));

        btnReview.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReview.setText("Review>");
        btnReview.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnReviewActionPerformed(evt);
            }
        });
        add(btnReview, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 440, 100, 30));

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 510, 130, 30));

        txtDetail.setColumns(20);
        txtDetail.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtDetail.setRows(5);
        jScrollPane3.setViewportView(txtDetail);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 280, 240, 110));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/report.png"))); // NOI18N
        jLabel5.setText(" ");

        jLabel5.setPreferredSize(new java.awt.Dimension(1150, 600));
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 960, 550));

    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnBackActionPerformed
    {//GEN-HEADEREND:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout)userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void comboStationActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_comboStationActionPerformed
    {//GEN-HEADEREND:event_comboStationActionPerformed
        // TODO add your handling code here:
        ChargingStation cs = (ChargingStation)comboStation.getSelectedItem();
        if (cs!=null){
            comboPile.removeAllItems();
            for (ChargingPile cp : cs.getPileList()){
                comboPile.addItem(cp);
            }
        }
        
        
        
    }//GEN-LAST:event_comboStationActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnAddActionPerformed
    {//GEN-HEADEREND:event_btnAddActionPerformed
        // TODO add your handling code here:
        
        String detail= txtDetail.getText();
        if (detail.length()==0){
            JOptionPane.showMessageDialog(null, "Deatil information should not be null!", "Information Required", JOptionPane.WARNING_MESSAGE);
            return;
        }
        txtDetail.setText("");
        ChargingStation cs = (ChargingStation)comboStation.getSelectedItem();
        ChargingPile cp = (ChargingPile)comboPile.getSelectedItem();
        boolean flag=true;
        if (cp!=null && cs!=null){
            reportPileMap.put(cp, cs);
            populateTable();
            //check for uniqueness
            for (DriverMaintenanceRequest r: requestList){
                if (r.getRequestedPile()==cp){
                    flag=false;
                }
            }
            //if there is no existing one, add it.
            if (flag==true){
                DriverMaintenanceRequest request= new DriverMaintenanceRequest();
                request.setMessage(detail);
                request.setRequestedPile(cp);
                request.setRequestedLocation(cs);
                request.setRequestDate(new Date());
                request.setSender(account);
                request.setStatus("PENDING");
                requestList.add(request);
            }
            
        }

        
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnReviewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnReviewActionPerformed
    {//GEN-HEADEREND:event_btnReviewActionPerformed
        // TODO add your handling code here:
        if (requestList.size()==0){
            JOptionPane.showMessageDialog(null, "You should add at least one broken Charging Pile", "ChargingPile Required", JOptionPane.WARNING_MESSAGE);
            return;
        }
        ReviewReportPileListJPanel panel = new ReviewReportPileListJPanel(userProcessContainer,system,account,requestList);
        userProcessContainer.add("ReviewReportPileListJPanel", panel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnReviewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnDeleteActionPerformed
    {//GEN-HEADEREND:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        //The delete button function will delete the charging pile from the 
        //charging station and also delete the charging pile from the request 
        //list;
        int row =pileTable.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Pls select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        ChargingPile cp = (ChargingPile)pileTable.getValueAt(row, 0); 
        reportPileMap.remove(cp);
        DriverMaintenanceRequest delete = null;
        for (DriverMaintenanceRequest request:requestList){
            if (request.getRequestedPile()==cp){
                delete=request;
            }
        }
        requestList.remove(delete);
        populate();
        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReview;
    private javax.swing.JComboBox comboPile;
    private javax.swing.JComboBox comboStation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable pileTable;
    private javax.swing.JTextArea txtDetail;
    // End of variables declaration//GEN-END:variables
}
