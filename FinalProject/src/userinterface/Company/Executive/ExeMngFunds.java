/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Company.Executive;

import Business.Enterprise.CompanyEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Company.ExecutiveOrganization;
import Business.Organization.Contractor.CoopContractor;
import Business.Organization.InvestorOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkRequest.InvestmentRequest;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.Investor.SendEmailToInvestor;

/**
 *
 * @author shaohanghu
 */
public class ExeMngFunds extends javax.swing.JPanel {

    /**
     * Creates new form ExeMngFunds
     */
    JPanel userProcessContainer;
    CompanyEnterprise enterprise;
    Network network;
    ArrayList<InvestmentRequest> list;
    
    public ExeMngFunds(JPanel compExeWorkAreaPanel, Network network,
            CompanyEnterprise enterprise, UserAccount account,
            ExecutiveOrganization org) {
        initComponents();
        this.userProcessContainer = compExeWorkAreaPanel;
        this.enterprise = enterprise;
        this.network = network;
        list = new ArrayList<InvestmentRequest>();
        DisplayContent();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        buttonApprove = new javax.swing.JButton();
        buttonReject = new javax.swing.JButton();
        labelBalance = new javax.swing.JLabel();
        labelMktValue = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Investor", "Amount", "Status"
            }
        ));
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setPreferredWidth(20);
            table.getColumnModel().getColumn(3).setPreferredWidth(150);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 501, 355));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 122, 164));
        jLabel1.setText("Investment List");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 305, 54));

        buttonApprove.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonApprove.setForeground(new java.awt.Color(102, 122, 164));
        buttonApprove.setText("Approve");
        buttonApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonApproveActionPerformed(evt);
            }
        });
        add(buttonApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 335, 135, 40));

        buttonReject.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        buttonReject.setForeground(new java.awt.Color(102, 122, 164));
        buttonReject.setText("Reject");
        buttonReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRejectActionPerformed(evt);
            }
        });

        add(buttonReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(562, 393, 135, 40));


        labelBalance.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelBalance.setForeground(new java.awt.Color(102, 122, 164));
        labelBalance.setText("Company Balance:");
        add(labelBalance, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, 290, -1));

        labelMktValue.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelMktValue.setForeground(new java.awt.Color(102, 122, 164));
        labelMktValue.setText("Market Value:");
        add(labelMktValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, 290, -1));


        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pics/invest.png"))); // NOI18N
        jLabel2.setText(" ");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 900, 480));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonReject, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelMktValue, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelBalance, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(68, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelBalance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(labelMktValue)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonReject, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(46, Short.MAX_VALUE))
        );

    }// </editor-fold>//GEN-END:initComponents

    private void buttonApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApproveActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        InvestmentRequest o = (InvestmentRequest)table.getValueAt(row,0);
        if(o.getStatus().equals("Pending")){
            int n = JOptionPane.showConfirmDialog(null, "Accept The Investment by " + o.getSender().getName() + " ?", "Accept?", JOptionPane.YES_NO_OPTION);
            if(n == 0){
                o.setStatus("APPROVED");
                int newBalance = enterprise.getBalance() + o.getAmount();
                int newMV = enterprise.getMarketValue() + o.getAmount();
                enterprise.setBalance(newBalance);
                enterprise.setMarketValue(newMV);
                SendEmailToInvestor.sendEmail(o.getSender().getEmailAdress());
                DisplayContent();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "This ticket has closed! Cannot modify!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        
    }//GEN-LAST:event_buttonApproveActionPerformed

    private void buttonRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRejectActionPerformed
        // TODO add your handling code here:

        int row = table.getSelectedRow();
        if(row<0){
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        InvestmentRequest o = (InvestmentRequest)table.getValueAt(row,0);
        if(o.getStatus().equals("Pending")){
            int n = JOptionPane.showConfirmDialog(null, "Decline The Investment by " + o.getSender().getName() + " ?", "Decline?", JOptionPane.YES_NO_OPTION);
            if(n == 0){
                o.setStatus("REJCTED");
                DisplayContent();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "This ticket has closed! Cannot modify!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_buttonRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonApprove;
    private javax.swing.JButton buttonReject;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelBalance;
    private javax.swing.JLabel labelMktValue;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    private void DisplayContent() {
       labelBalance.setText("Company Balance: $"+ enterprise.getBalance());
       labelMktValue.setText("Market Value: $"+ enterprise.getMarketValue());
       list.clear();
       DefaultTableModel model = (DefaultTableModel) table.getModel();
          model.setRowCount(0);
          if(enterprise.getCoopContractorList()== null){
                System.out.println(
                      "list empty");    
           }
          else{
                for (Enterprise e : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if(e.getName().equals("Investor")){
                        for(Organization i : e.getOrganizationDirectory().getOrganizationList()){
                       System.out.println("XX" + i.getName()); 
                       InvestorOrganization io = (InvestorOrganization) i;
                           for(InvestmentRequest IR : io.getInverstmentWorkQueue().getList()){
                               list.add(IR);
                           }
                   }
                    }
                   
                }
                for(InvestmentRequest r: list){
                    Object row[] = new Object[4];
                    row[0] = r;
                    row[1] = r.getSender().getName();
                    row[2] = r.getAmount();
                    row[3] = r.getStatus();
                    model.addRow(row);
                }
                
          }
       
    }
}
